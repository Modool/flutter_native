import 'dart:core';

import 'package:flutter_native_runtime/flutter_native_runtime.dart';

import 'asset_manager.dart';
import 'class_loader.dart';
import 'resources_impl.dart';

class Resources {
  Resources(this._target, this._classTarget);

  ///
  /// Return a global shared Resources object that provides access to only
  /// system resources (no application resources), and is not configured for
  /// the current screen (can not use dimension units, does not change based
  /// on orientation, etc).
  ///
  factory Resources.system() => Resources.from(classTarget.method('getSystem'));

  factory Resources.from(NativeTarget target) => Resources(target, classTarget);

  static final classTarget =
      NativeRuntime().classNamed('android.content.res.Resources');

  final NativeTarget _classTarget;
  final NativeTarget _target;

  Future<int> selectDefaultTheme(int curTheme, int targetSdkVersion) =>
      _classTarget.method('selectDefaultTheme',
          arguments: [curTheme, targetSdkVersion]).invoke<int>();

  ///  @hide */
  Future<int> selectSystemTheme(int curTheme, int targetSdkVersion, int orig,
          int holo, int dark, int deviceDefault) =>
      _classTarget.method('selectSystemTheme', arguments: [
        curTheme,
        targetSdkVersion,
        orig,
        holo,
        dark,
        deviceDefault
      ]).invoke<int>();

  ///
  /// @hide
  ///
  ResourcesImpl get impl =>
      ResourcesImpl.from(_target.memberVariable('mResourcesImpl'));

  ///
  /// @hide
  ///
  ClassLoader get classLoader =>
      ClassLoader.from(_target.memberVariable('mClassLoader'));

  ///
  /// @hide
  ///
  Future<void> preloadFonts(int id) =>
      _target.method('preloadFonts', arguments: [id]).invoke<void>();

  ///
  /// Returns the character sequence necessary for grammatically correct pluralization
  /// of the given resource ID for the given quantity.
  /// Note that the character sequence is selected based solely on grammatical necessity,
  /// and that such rules differ between languages. Do not assume you know which string
  /// will be returned for a given quantity. See
  /// <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
  /// for more detail.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  /// @param quantity The number used to get the correct string for the current language's
  ///           plural rules.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return CharSequence The string data associated with the resource, plus
  ///         possibly styled text information.
  ///
  Future<String> quantityText(int id, int quantity) => _target
      .method('getQuantityText', arguments: [id, quantity]).invoke<String>();

  ///
  /// Return the string value associated with a particular resource ID.  It
  /// will be stripped of any styled text information.
  /// {@more}
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return String The string data associated with the resource,
  ///         stripped of styled text information.
  ///
  Future<String> string(int id) =>
      _target.method('getString', arguments: [id]).invoke<String>();

  ///
  /// Return the string value associated with a particular resource ID,
  /// substituting the format arguments as defined in {@link java.util.Formatter}
  /// and {@link java.lang.String#format}. It will be stripped of any styled text
  /// information.
  /// {@more}
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @param formatArgs The format arguments that will be used for substitution.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return String The string data associated with the resource,
  ///         stripped of styled text information.
  ///
  Future<String> stringWithFromat(int id, List formatArgs) {
    final arguments = <dynamic>[id];
    arguments.addAll(formatArgs);
    return _target.method('getString', arguments: arguments).invoke<String>();
  }

  ///
  /// Formats the string necessary for grammatically correct pluralization
  /// of the given resource ID for the given quantity, using the given arguments.
  /// Note that the string is selected based solely on grammatical necessity,
  /// and that such rules differ between languages. Do not assume you know which string
  /// will be returned for a given quantity. See
  /// <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
  /// for more detail.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  /// @param quantity The number used to get the correct string for the current language's
  ///           plural rules.
  /// @param formatArgs The format arguments that will be used for substitution.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return String The string data associated with the resource,
  /// stripped of styled text information.
  ///
  Future<String> quantityStringWithFromat(
      int id, int quantity, List formatArgs) {
    final arguments = <dynamic>[id, quantity];
    arguments.addAll(formatArgs);
    return _target
        .method('getQuantityString', arguments: arguments)
        .invoke<String>();
  }

  ///
  /// Returns the string necessary for grammatically correct pluralization
  /// of the given resource ID for the given quantity.
  /// Note that the string is selected based solely on grammatical necessity,
  /// and that such rules differ between languages. Do not assume you know which string
  /// will be returned for a given quantity. See
  /// <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
  /// for more detail.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  /// @param quantity The number used to get the correct string for the current language's
  ///           plural rules.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return String The string data associated with the resource,
  /// stripped of styled text information.
  ///
  Future<String> quantityString(int id, int quantity) => _target
      .method('getQuantityString', arguments: [id, quantity]).invoke<String>();

  ///
  /// Return the styled text array associated with a particular resource ID.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return The styled text array associated with the resource.
  ///

  Future<List<String>> stringArray(int id) =>
      _target.method('getStringArray', arguments: [id]).invoke<List<String>>();

  ///
  /// Return the int array associated with a particular resource ID.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return The int array associated with the resource.
  ///
  Future<List<int>> intArray(int id) =>
      _target.method('getIntArray', arguments: [id]).invoke<List<int>>();

  ///
  /// Retrieve a dimensional for a particular resource ID.  Unit
  /// conversions are based on the current {@link DisplayMetrics} associated
  /// with the resources.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @return Resource dimension value multiplied by the appropriate
  /// metric.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getDimensionPixelOffset
  /// @see #getDimensionPixelSize
  ///
  Future<double> dimension(int id) =>
      _target.method('getDimension', arguments: [id]).invoke<double>();

  ///
  /// Retrieve a dimensional for a particular resource ID for use
  /// as an offset in raw pixels.  This is the same as
  /// {@link #getDimension}, except the returned value is converted to
  /// integer pixels for you.  An offset conversion involves simply
  /// truncating the base value to an integer.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @return Resource dimension value multiplied by the appropriate
  /// metric and truncated to integer pixels.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getDimension
  /// @see #getDimensionPixelSize
  ///
  Future<int> dimensionPixelOffset(int id) =>
      _target.method('getDimensionPixelOffset', arguments: [id]).invoke<int>();

  ///
  /// Retrieve a dimensional for a particular resource ID for use
  /// as a size in raw pixels.  This is the same as
  /// {@link #getDimension}, except the returned value is converted to
  /// integer pixels for use as a size.  A size conversion involves
  /// rounding the base value, and ensuring that a non-zero base value
  /// is at least one pixel in size.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @return Resource dimension value multiplied by the appropriate
  /// metric and truncated to integer pixels.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getDimension
  /// @see #getDimensionPixelOffset
  ///
  Future<int> dimensionPixelSize(int id) =>
      _target.method('getDimensionPixelSize', arguments: [id]).invoke<int>();

  ///
  /// Retrieve a fractional unit for a particular resource ID.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  /// @param base The base value of this fraction.  In other words, a
  ///             standard fraction is multiplied by this value.
  /// @param pbase The parent base value of this fraction.  In other
  ///             words, a parent fraction (nn%p) is multiplied by this
  ///             value.
  ///
  /// @return Attribute fractional value multiplied by the appropriate
  /// base value.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  Future<double> fraction(int id, int base, int pbase) => _target
      .method('getFraction', arguments: [id, base, pbase]).invoke<double>();

  ///
  /// Returns a color integer associated with a particular resource ID. If the
  /// resource holds a complex {@link ColorStateList}, then the default color
  /// from the set is returned.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does
  ///         not exist.
  ///
  /// @return A single color value in the form 0xAARRGGBB.
  /// @deprecated Use {@link #getColor(int, Theme)} instead.
  ///
  Future<int> color(int id) =>
      _target.method('getColor', arguments: [id]).invoke<int>();

  ///
  /// Return a boolean associated with a particular resource ID.  This can be
  /// used with any integral resource value, and will return true if it is
  /// non-zero.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return Returns the boolean value contained in the resource.
  ///
  Future<bool> boolean(int id) =>
      _target.method('getBoolean', arguments: [id]).invoke<bool>();

  ///
  /// Return an integer associated with a particular resource ID.
  ///
  /// @param id The desired resource identifier, as generated by the aapt
  ///           tool. This integer encodes the package, type, and resource
  ///           entry. The value 0 is an invalid identifier.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @return Returns the integer value contained in the resource.
  ///
  Future<int> integer(int id) =>
      _target.method('getInteger', arguments: [id]).invoke<int>();

  ///
  /// Return a resource identifier for the given resource name.  A fully
  /// qualified resource name is of the form "package:type/entry".  The first
  /// two components (package and type) are optional if defType and
  /// defPackage, respectively, are specified here.
  ///
  /// <p>Note: use of this function is discouraged.  It is much more
  /// efficient to retrieve resources by identifier than by name.
  ///
  /// @param name The name of the desired resource.
  /// @param defType Optional default resource type to find, if "type/" is
  ///                not included in the name.  Can be null to require an
  ///                explicit type.
  /// @param defPackage Optional default package to find, if "package:" is
  ///                   not included in the name.  Can be null to require an
  ///                   explicit package.
  ///
  /// @return int The associated resource identifier.  Returns 0 if no such
  ///         resource was found.  (0 is not a valid resource ID.)
  ///
  Future<int> dentifier(String name, String defType, String defPackage) =>
      _target.method('getIdentifier',
          arguments: [name, defType, defPackage]).invoke<int>();

  ///
  /// Return true if given resource identifier includes a package.
  ///
  /// @hide
  ///
  Future<bool> resourceHasPackage(int id) =>
      _target.method('resourceHasPackage', arguments: [id]).invoke<bool>();

  ///
  /// Return the full name for a given resource identifier.  This name is
  /// a single string of the form "package:type/entry".
  ///
  /// @param resid The resource identifier whose name is to be retrieved.
  ///
  /// @return A string holding the name of the resource.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getResourcePackageName
  /// @see #getResourceTypeName
  /// @see #getResourceEntryName
  ///
  Future<String> resourceName(int id) =>
      _target.method('getResourceName', arguments: [id]).invoke<String>();

  ///
  /// Return the package name for a given resource identifier.
  ///
  /// @param resid The resource identifier whose package name is to be
  /// retrieved.
  ///
  /// @return A string holding the package name of the resource.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getResourceName
  ///
  Future<String> resourcePackageName(int id) => _target
      .method('getResourcePackageName', arguments: [id]).invoke<String>();

  ///
  /// Return the type name for a given resource identifier.
  ///
  /// @param resid The resource identifier whose type name is to be
  /// retrieved.
  ///
  /// @return A string holding the type name of the resource.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getResourceName
  ///
  Future<String> resourceTypeName(int id) =>
      _target.method('getResourceTypeName', arguments: [id]).invoke<String>();

  ///
  /// Return the entry name for a given resource identifier.
  ///
  /// @param resid The resource identifier whose entry name is to be
  /// retrieved.
  ///
  /// @return A string holding the entry name of the resource.
  ///
  /// @throws NotFoundException Throws NotFoundException if the given ID does not exist.
  ///
  /// @see #getResourceName
  ///
  Future<String> resourceEntryName(int id) =>
      _target.method('getResourceEntryName', arguments: [id]).invoke<String>();

  ///
  /// Retrieve underlying AssetManager storage for these resources.
  ///
  AssetManager get assetManager =>
      AssetManager.from(_target.method('getAssets'));

  ///
  /// Call this to remove all cached loaded layout resources from the
  /// Resources object.  Only intended for use with performance testing
  /// tools.
  ///
  Future<void> flushLayoutCache() =>
      _target.method('flushLayoutCache').invoke<void>();

  ///
  /// Start preloading of resource data using this Resources object.  Only
  /// for use by the zygote process for loading common system resources.
  /// {@hide}
  ///
  Future<void> startPreloading() =>
      _target.method('startPreloading').invoke<void>();

  ///
  /// Called by zygote when it is done preloading resources, to change back
  /// to normal Resources operation.
  ///
  Future<void> finishPreloading() =>
      _target.method('finishPreloading').invoke<void>();
}
